{"version":3,"sources":["GameProvider.js","GameCell.js","GameBoard.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["gameContext","React","createContext","makeInitialState","size","arguments","length","undefined","board","Array","fill","isFirstPlayerTurn","winner","previousState","nextState","getOwner","first","candidate","_len","others","_key","every","cell","GameProvider","_ref","children","_useReducer","useReducer","state","action","produce","draft","type","x","y","_getDiags","map","row","getDiags","_getDiags2","Object","slicedToArray","leftDiag","rightDiag","apply","toConsumableArray","reduce","col","push","getCol","getWinner","objectSpread","nothing","_useReducer2","dispatch","react_default","a","createElement","Provider","value","play","reset","undo","redo","resize","Cell","memo","data","onClick","className","concat","content","PureGameCell","props","useMemo","GameCell","GameBoard","fn","delay","_useContext","useContext","_useContext$state","resetGame","_useState","useState","_useState2","firstPlayerTime","setFirstPlayerTime","_useState3","_useState4","secondPlayerTime","setSecondPlayerTime","loop","_","i","useEffect","id","setInterval","clearInterval","colSpan","htmlFor","onChange","e","Number","target","Math","round","key","String","App","src_GameProvider","src_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c63c12a7.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\nimport produce, { nothing } from \"immer\";\n\nconst gameContext = React.createContext();\n\nfunction GameProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, makeInitialState(3));\n\n  function reducer(state, action) {\n    return produce(state, draft => {\n      switch (action.type) {\n        case \"play\": {\n          const { x, y } = action;\n\n          if (!state.winner && !state.board[x][y]) {\n            draft.board[x][y] = state.isFirstPlayerTurn ? 1 : 2;\n            draft.isFirstPlayerTurn = !state.isFirstPlayerTurn;\n            draft.winner = getWinner(draft.board);\n            draft.previousState = state;\n            draft.nextState = null;\n          }\n\n          break;\n        }\n        case \"reset\":\n          return makeInitialState(state.board.length);\n        case \"undo\":\n          return state.previousState\n            ? {\n                ...state.previousState,\n                nextState: state\n              }\n            : nothing;\n        case \"redo\":\n          return state.nextState || nothing;\n        case \"resize\":\n          return makeInitialState(action.size);\n        default:\n      }\n    });\n  }\n\n  return (\n    <gameContext.Provider\n      value={{\n        state,\n        play: (x, y) => dispatch({ type: \"play\", x, y }),\n        reset: () => dispatch({ type: \"reset\" }),\n        undo: () => dispatch({ type: \"undo\" }),\n        redo: () => dispatch({ type: \"redo\" }),\n        resize: size => dispatch({ type: \"resize\", size })\n      }}\n    >\n      {children}\n    </gameContext.Provider>\n  );\n}\n\n/**\n * Creates a new game state.\n * @param size size of the board to create\n */\nfunction makeInitialState(size = 3) {\n  return {\n    board: Array(size).fill(Array(size).fill(null)),\n    isFirstPlayerTurn: true,\n    winner: null,\n    previousState: null,\n    nextState: null\n  };\n}\n\n/**\n * Returns the owner of a list of cells, or `null` if all the cells are not\n * owned by a single player.\n */\nfunction getOwner(first, ...others) {\n  const candidate = first;\n\n  return candidate !== null && others.every(cell => cell === candidate)\n    ? candidate\n    : null;\n}\n\n/**\n * Returns the column at the given index for a given board.\n * @param x index of the column\n * @param board board to parse\n */\nfunction getCol(x, board) {\n  return board.reduce((col, row) => {\n    col.push(row[x]);\n    return col;\n  }, []);\n}\n\n/**\n * Get the two diagonals cells for a board.\n * @param board board to parse\n */\nfunction getDiags(board) {\n  return [\n    board.map((row, x) => row[x]),\n    board.map((row, x) => row[board.length - x - 1])\n  ];\n}\n\n/**\n * Checks if there's an owner for any row, column or diagonal and returns it\n * as the winner.\n * @param board board to parse\n */\nfunction getWinner(board) {\n  const [leftDiag, rightDiag] = getDiags(board);\n\n  return (\n    getOwner(...leftDiag) ||\n    getOwner(...rightDiag) ||\n    board.reduce(\n      (winner, row, x) =>\n        winner || getOwner(...row) || getOwner(...getCol(x, board)),\n      null\n    )\n  );\n}\n\nexport { gameContext };\nexport default GameProvider;\n","import React from \"react\";\n\nconst Cell = React.memo(({ data, onClick }) => {\n  const className = `game-cell ${\n    data === 1 ? \"own-by-first\" : data === 2 ? \"own-by-second\" : \"\"\n  }`;\n  const content = data === 1 ? \"X\" : data === 2 ? \"O\" : null;\n\n  return (\n    <td onClick={onClick} className={className}>\n      {content}\n    </td>\n  );\n});\n\nexport default Cell;\n","import React, { useContext, useMemo, useState } from \"react\";\n\nimport GameCell from \"./GameCell\";\nimport { gameContext } from \"./GameProvider\";\nimport { useInterval } from \"./hooks\";\n\nfunction PureGameCell(props) {\n  // this memoization cannot be done in `GameBoard` because hooks can only be\n  // called at the top level\n  return useMemo(() => <GameCell {...props} />, [props.data]);\n}\n\nfunction GameBoard() {\n  const {\n    state: { board, winner, isFirstPlayerTurn },\n    reset: resetGame,\n    play,\n    undo,\n    redo,\n    resize\n  } = useContext(gameContext);\n\n  const [firstPlayerTime, setFirstPlayerTime] = useState(0);\n  const [secondPlayerTime, setSecondPlayerTime] = useState(0);\n\n  function reset() {\n    setFirstPlayerTime(0);\n    setSecondPlayerTime(0);\n    resetGame();\n  }\n  useInterval(() => {\n    if (winner) return;\n\n    isFirstPlayerTurn\n      ? setFirstPlayerTime(firstPlayerTime + 100)\n      : setSecondPlayerTime(secondPlayerTime + 100);\n  }, 100);\n\n  function loop(fn) {\n    return Array(board.length)\n      .fill(null)\n      .map((_, i) => fn(i));\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td colSpan=\"3\">\n            <div className=\"game-size-wrapper\">\n              <label htmlFor=\"game-size\">Board size</label>\n              <input\n                id=\"game-size\"\n                type=\"number\"\n                value={board.length}\n                onChange={e => resize(Number(e.target.value))}\n              />\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td colSpan=\"1\">\n            <p>{Math.round(firstPlayerTime / 1000)} s</p>\n          </td>\n          <td colSpan=\"1\" />\n          <td colSpan=\"1\">\n            <p>{Math.round(secondPlayerTime / 1000)} s</p>\n          </td>\n        </tr>\n      </thead>\n      <tbody className=\"game-board\">\n        {loop(x => (\n          <tr key={x} className=\"game-row\">\n            {loop(y => (\n              <PureGameCell\n                key={`${x}${y}`}\n                data={board[x][y]}\n                onClick={() => play(x, y)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          {String(board.length - 3) > 0 && (\n            <td colSpan={String(board.length - 3)} />\n          )}\n          <td colSpan=\"1\">\n            <button className=\"game-reset\" onClick={reset}>\n              Reset\n            </button>\n          </td>\n          <td colSpan=\"1\">\n            <button className=\"game-reset\" onClick={undo}>\n              Undo\n            </button>\n          </td>\n          <td colSpan=\"1\">\n            <button className=\"game-reset\" onClick={redo}>\n              Redo\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td colSpan=\"3\">{winner && `Player ${winner} win.`}</td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n}\n\nexport default GameBoard;\n","import { useEffect } from \"react\";\n\nexport function useInterval(fn, delay) {\n  useEffect(() => {\n    const id = setInterval(fn, delay);\n    return () => clearInterval(id);\n  });\n}\n","import React from \"react\";\n\nimport GameProvider from \"./GameProvider\";\nimport GameBoard from \"./GameBoard\";\nimport \"./Board.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameProvider>\n        <GameBoard />\n      </GameProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}